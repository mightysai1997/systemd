#!/bin/sh
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This file is part of systemd.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <https://www.gnu.org/licenses/>.

set -e

COMMAND="${1:?}"
KERNEL_VERSION="${2:?}"
ENTRY_DIR_ABS="${3:?}"
KERNEL_IMAGE="$4"

BOOT_ROOT="$KERNEL_INSTALL_BOOT_ROOT"
ENTRY_TOKEN="$KERNEL_INSTALL_ENTRY_TOKEN"
LOADER_ENTRY_DIR="$BOOT_ROOT/loader/entries/"

KERNEL_DEST="$ENTRY_DIR_ABS/linux"
STAGING_KERNEL="$KERNEL_INSTALL_STAGING_AREA/linux"
STAGING_INITRD="$KERNEL_INSTALL_STAGING_AREA/initrd"

[ "$COMMAND" = "add" ] || exit 0

[ "$KERNEL_INSTALL_LAYOUT" = "bls" ] || exit 0

# snapper snapshot support
[ -d /.snapshots ] && [ -x /sbin/btrfs ] && [ "$(stat -f -c %T /)" = "btrfs" ] || return 0

detect_snapshot() {
    # when called by eg. transactional-update it passes us that information
    if [ -z "$SNAPSHOT" ] && [ -z "$SUBVOL" ]; then
        SUBVOL="$(/sbin/btrfs subvol show / | head -1)"
        SNAPSHOT="${SUBVOL#@/.snapshots/}"
        if [ "$SUBVOL" = "$SNAPSHOT" ]; then
            unset SUBVOL SNAPSHOT
            return 1
        fi
        SNAPSHOT="${SNAPSHOT%/snapshot}"
    fi
    PARENT_UUID="$(btrfs subvol show / | sed -ne 's/\s*Parent UUID:\s*//p')"
    if [ -n "$PARENT_UUID" ]; then
        PARENT_SUBVOL="$(/sbin/btrfs subvol show -u "$PARENT_UUID" / | head -1)"
        PARENT_SNAPSHOT="${PARENT_SUBVOL#@/.snapshots/}"
        if [ "$PARENT_SUBVOL" = "$PARENT_SNAPSHOT" ]; then
            unset PARENT_SUBVOL PARENT_SNAPSHOT
        else
            PARENT_SNAPSHOT="${PARENT_SNAPSHOT%/snapshot}"
        fi
    fi
}

detect_snapshot

calc_chksum() {
    # shellcheck disable=SC2046
    set -- $(sha1sum "$1")
    chksum="$1"
}

calc_chksum "$KERNEL_IMAGE"

KERNEL_DEST="$KERNEL_DEST-$chksum"
KERNEL_ENTRY="$KERNEL_ENTRY-$chksum"

# check if something already copied the kernel
if ! [ -e "$STAGING_KERNEL" ]; then
    if [ -e "$KERNEL_DEST" ]; then
	ln -s "$KERNEL_DEST" "$STAGING_KERNEL"
    else
	install -m 0644 "$KERNEL_IMAGE" "$STAGING_KERNEL-$chksum" || {
	    echo "Error: could not copy '$KERNEL_IMAGE' to '$STAGING_KERNEL-$chksum'." >&2
	    exit 1
	}
	ln -s "linux-$chksum" "$STAGING_KERNEL" || exit 1
    fi
fi
if [ ! -e "$STAGING_INITRD" ] && [ "$PARENT_SNAPSHOT" ] && [ -e "$LOADER_ENTRY_DIR/$ENTRY_TOKEN-$KERNEL_VERSION-$PARENT_SNAPSHOT.conf" ]; then
    while read -r k v; do
        [ "$k" = 'initrd' ] || continue
        echo "found previous initrd $v"
        ln -s "$BOOT_ROOT$v" "$STAGING_INITRD" || :
        break
    done < "$LOADER_ENTRY_DIR/$ENTRY_TOKEN-$KERNEL_VERSION-$PARENT_SNAPSHOT.conf"
fi
